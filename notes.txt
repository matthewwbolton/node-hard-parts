- The ability of JS to go down the page line by line and execute code is known as the thread of execution.
- To run the code inside of a function declaration we need a new execution context.
-If there is no return keyword inside the execution context of the function being executed then we just leave the function when we reach the closing curly brace.
-Javascript Does two main things:
    1) Saves code and data to be executed at a later time
    2) Runs / Executes saved code and data
-there are 64,000 network ports on any given network interface
-

Node with http:

    - 

Node File System:
    - every 64,000 bytes or 64 KB of data brought into node is handled as a stream - 64 KB is called the high water mark
    - Accessing 1 MB from the hard drive of a machine takes ~ 1 ms
    - Node has an error first pattern, a lot of the time there will be two inputs into a function, the first of which will be errorData in most cases
    - 

Node Streams:
    - A stream is a chunk of data - by default in node it is 64 KB in size
    - The broadcast type in node is 'data' much like the 'request' broadcast type for an incoming http message and the 'clientError' broadcast type for client errors in node.
    - Node will use a queue to store individual streams of data as they are processed while the auto-called function associated with the emitted 'data' event continues to process the data from the previous stream. Once the previous stream has been processed the next stream will be dequeued and the process will continue until the queue has been emptied and all the data from the original file has been handled.
    - This concept is the introduction of the event loop in node and the associated callback queue
    - There are a total of 6 queues in the node event loop
    - Call Stack = JS keeps track of what function is being run and where it is being run from. Whenever a function is to be run, it is added to the call stack.
    - Callback Queue = any functions delayed from running (and automatically run by node) are added to the callback queue when the background node task has completed (or there's been some activity like a request)
    -Event Loop = Determines what function/code to run next from the queues
    - When the whole file has been processed, node will emit a 'close' event signaling that file processing is completed
    - 

Asynchronicity in Node:
    - there are no timers in Javascript
    - setTimeout is not a Javascript function, it is part of the browser API - there are no timers in Javascript
    - One of the queues in node is the timer queue
    - setTimeout will only ever tell you how long it will take before the callback function you pass as an argument to setTimeout will take before that callback is placed in the timer queue - it will not tell you how long it will take before the function will run
    - Another queue is the I/O callback queue - 95% of the functions that auto-run in node go into this queue
    -when javascript is running code in the thread of execution, it will always run all global code first before it allows any of the functions in any of the callback queues to run
    - The third prioritized queue is the check queue - in order to place a function in the check queue, you use setImmediate and pass it the function you want to be added to the check queue
    -the check queue is always checked last so that node can insure that all I/O related tasks have been completed before anything in the check queue is run - this is by design - there are times that we want to ensure that certain functions are run only after all I/O tasks are complete 
    - once the callstack has been cleared of all globally invoked functions and the remaining global code has been executed, the event loop will then go back and start checking the callback queues in order of priority
    -the timer queue will be the queue that is checked first and therefor has the highest priority - this is not really a queue per se, but timers are stored in a minHeap - for the sake of this demonstration we will think of it as a queue
    - the next queue in priority is the I/O callback queue
    -the final queue to be checked by the node event loop is the check queue and will add callback functions in this queue to the call stack last
    -